// Generated by purs version 0.11.5
"use strict";
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Boolean = require("../Data.Boolean");
var Data_Enum = require("../Data.Enum");
var Data_Eq = require("../Data.Eq");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Generic_Rep = require("../Data.Generic.Rep");
var Data_Generic_Rep_Bounded = require("../Data.Generic.Rep.Bounded");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Maybe = require("../Data.Maybe");
var Data_Newtype = require("../Data.Newtype");
var Data_Ord = require("../Data.Ord");
var Data_Ring = require("../Data.Ring");
var Data_Semiring = require("../Data.Semiring");
var Prelude = require("../Prelude");
var GenericEnum = function (genericPred$prime, genericSucc$prime) {
    this["genericPred'"] = genericPred$prime;
    this["genericSucc'"] = genericSucc$prime;
};
var GenericBoundedEnum = function (genericCardinality$prime, genericFromEnum$prime, genericToEnum$prime) {
    this["genericCardinality'"] = genericCardinality$prime;
    this["genericFromEnum'"] = genericFromEnum$prime;
    this["genericToEnum'"] = genericToEnum$prime;
};
var genericToEnum$prime = function (dict) {
    return dict["genericToEnum'"];
};
var genericToEnum = function (dictGeneric) {
    return function (dictGenericBoundedEnum) {
        return function ($58) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.to(dictGeneric))(genericToEnum$prime(dictGenericBoundedEnum)($58));
        };
    };
};
var genericSucc$prime = function (dict) {
    return dict["genericSucc'"];
};
var genericSucc = function (dictGeneric) {
    return function (dictGenericEnum) {
        return function ($59) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.to(dictGeneric))(genericSucc$prime(dictGenericEnum)(Data_Generic_Rep.from(dictGeneric)($59)));
        };
    };
};
var genericPred$prime = function (dict) {
    return dict["genericPred'"];
};
var genericPred = function (dictGeneric) {
    return function (dictGenericEnum) {
        return function ($60) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.to(dictGeneric))(genericPred$prime(dictGenericEnum)(Data_Generic_Rep.from(dictGeneric)($60)));
        };
    };
};
var genericFromEnum$prime = function (dict) {
    return dict["genericFromEnum'"];
};
var genericFromEnum = function (dictGeneric) {
    return function (dictGenericBoundedEnum) {
        return function ($61) {
            return genericFromEnum$prime(dictGenericBoundedEnum)(Data_Generic_Rep.from(dictGeneric)($61));
        };
    };
};
var genericEnumSum = function (dictGenericEnum) {
    return function (dictGenericTop) {
        return function (dictGenericEnum1) {
            return function (dictGenericBottom) {
                return new GenericEnum(function (v) {
                    if (v instanceof Data_Generic_Rep.Inl) {
                        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Inl.create)(genericPred$prime(dictGenericEnum)(v.value0));
                    };
                    if (v instanceof Data_Generic_Rep.Inr) {
                        var v1 = genericPred$prime(dictGenericEnum1)(v.value0);
                        if (v1 instanceof Data_Maybe.Nothing) {
                            return new Data_Maybe.Just(new Data_Generic_Rep.Inl(Data_Generic_Rep_Bounded["genericTop'"](dictGenericTop)));
                        };
                        if (v1 instanceof Data_Maybe.Just) {
                            return new Data_Maybe.Just(new Data_Generic_Rep.Inr(v1.value0));
                        };
                        throw new Error("Failed pattern match at Data.Generic.Rep.Enum line 30, column 14 - line 32, column 31: " + [ v1.constructor.name ]);
                    };
                    throw new Error("Failed pattern match at Data.Generic.Rep.Enum line 28, column 18 - line 32, column 31: " + [ v.constructor.name ]);
                }, function (v) {
                    if (v instanceof Data_Generic_Rep.Inl) {
                        var v1 = genericSucc$prime(dictGenericEnum)(v.value0);
                        if (v1 instanceof Data_Maybe.Nothing) {
                            return new Data_Maybe.Just(new Data_Generic_Rep.Inr(Data_Generic_Rep_Bounded["genericBottom'"](dictGenericBottom)));
                        };
                        if (v1 instanceof Data_Maybe.Just) {
                            return new Data_Maybe.Just(new Data_Generic_Rep.Inl(v1.value0));
                        };
                        throw new Error("Failed pattern match at Data.Generic.Rep.Enum line 34, column 14 - line 36, column 31: " + [ v1.constructor.name ]);
                    };
                    if (v instanceof Data_Generic_Rep.Inr) {
                        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Inr.create)(genericSucc$prime(dictGenericEnum1)(v.value0));
                    };
                    throw new Error("Failed pattern match at Data.Generic.Rep.Enum line 33, column 18 - line 37, column 36: " + [ v.constructor.name ]);
                });
            };
        };
    };
};
var genericEnumNoArguments = new GenericEnum(function (v) {
    return Data_Maybe.Nothing.value;
}, function (v) {
    return Data_Maybe.Nothing.value;
});
var genericEnumConstructor = function (dictGenericEnum) {
    return new GenericEnum(function (v) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Constructor)(genericPred$prime(dictGenericEnum)(v));
    }, function (v) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Constructor)(genericSucc$prime(dictGenericEnum)(v));
    });
};
var genericEnumArgument = function (dictEnum) {
    return new GenericEnum(function (v) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Argument)(Data_Enum.pred(dictEnum)(v));
    }, function (v) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Argument)(Data_Enum.succ(dictEnum)(v));
    });
};
var genericCardinality$prime = function (dict) {
    return dict["genericCardinality'"];
};
var genericCardinality = function (dictGeneric) {
    return function (dictGenericBoundedEnum) {
        return Data_Newtype.unwrap(Data_Enum.newtypeCardinality)(genericCardinality$prime(dictGenericBoundedEnum));
    };
};
var genericBoundedEnumSum = function (dictGenericBoundedEnum) {
    return function (dictGenericBoundedEnum1) {
        return new GenericBoundedEnum(Data_Enum.Cardinality(Data_Newtype.unwrap(Data_Enum.newtypeCardinality)(genericCardinality$prime(dictGenericBoundedEnum)) + Data_Newtype.unwrap(Data_Enum.newtypeCardinality)(genericCardinality$prime(dictGenericBoundedEnum1)) | 0), function (v) {
            if (v instanceof Data_Generic_Rep.Inl) {
                return genericFromEnum$prime(dictGenericBoundedEnum)(v.value0);
            };
            if (v instanceof Data_Generic_Rep.Inr) {
                return genericFromEnum$prime(dictGenericBoundedEnum1)(v.value0) + Data_Newtype.unwrap(Data_Enum.newtypeCardinality)(genericCardinality$prime(dictGenericBoundedEnum)) | 0;
            };
            throw new Error("Failed pattern match at Data.Generic.Rep.Enum line 78, column 22 - line 80, column 80: " + [ v.constructor.name ]);
        }, function (n) {
            var to = function (v) {
                if (n >= 0 && n < v) {
                    return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Inl.create)(genericToEnum$prime(dictGenericBoundedEnum)(n));
                };
                if (Data_Boolean.otherwise) {
                    return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Inr.create)(genericToEnum$prime(dictGenericBoundedEnum1)(n - v | 0));
                };
                throw new Error("Failed pattern match at Data.Generic.Rep.Enum line 75, column 5 - line 77, column 52: " + [ v.constructor.name ]);
            };
            return to(genericCardinality$prime(dictGenericBoundedEnum));
        });
    };
};
var genericBoundedEnumNoArguments = new GenericBoundedEnum(1, function (v) {
    return 0;
}, function (i) {
    var $55 = i === 0;
    if ($55) {
        return new Data_Maybe.Just(Data_Generic_Rep.NoArguments.value);
    };
    return Data_Maybe.Nothing.value;
});
var genericBoundedEnumConstructor = function (dictGenericBoundedEnum) {
    return new GenericBoundedEnum(Data_Newtype.unwrap(Data_Enum.newtypeCardinality)(genericCardinality$prime(dictGenericBoundedEnum)), function (v) {
        return genericFromEnum$prime(dictGenericBoundedEnum)(v);
    }, function (i) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Constructor)(genericToEnum$prime(dictGenericBoundedEnum)(i));
    });
};
var genericBoundedEnumArgument = function (dictBoundedEnum) {
    return new GenericBoundedEnum(Data_Newtype.unwrap(Data_Enum.newtypeCardinality)(Data_Enum.cardinality(dictBoundedEnum)), function (v) {
        return Data_Enum.fromEnum(dictBoundedEnum)(v);
    }, function (i) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Argument)(Data_Enum.toEnum(dictBoundedEnum)(i));
    });
};
module.exports = {
    GenericBoundedEnum: GenericBoundedEnum, 
    GenericEnum: GenericEnum, 
    genericCardinality: genericCardinality, 
    "genericCardinality'": genericCardinality$prime, 
    genericFromEnum: genericFromEnum, 
    "genericFromEnum'": genericFromEnum$prime, 
    genericPred: genericPred, 
    "genericPred'": genericPred$prime, 
    genericSucc: genericSucc, 
    "genericSucc'": genericSucc$prime, 
    genericToEnum: genericToEnum, 
    "genericToEnum'": genericToEnum$prime, 
    genericEnumNoArguments: genericEnumNoArguments, 
    genericEnumArgument: genericEnumArgument, 
    genericEnumConstructor: genericEnumConstructor, 
    genericEnumSum: genericEnumSum, 
    genericBoundedEnumNoArguments: genericBoundedEnumNoArguments, 
    genericBoundedEnumArgument: genericBoundedEnumArgument, 
    genericBoundedEnumConstructor: genericBoundedEnumConstructor, 
    genericBoundedEnumSum: genericBoundedEnumSum
};
