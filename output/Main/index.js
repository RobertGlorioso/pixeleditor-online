// Generated by purs version 0.11.5
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Category = require("../Control.Category");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Array = require("../Data.Array");
var Data_EuclideanRing = require("../Data.EuclideanRing");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Lens = require("../Data.Lens");
var Data_Lens_Lens = require("../Data.Lens.Lens");
var Data_Lens_Setter = require("../Data.Lens.Setter");
var Data_Maybe = require("../Data.Maybe");
var Data_Ord = require("../Data.Ord");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong");
var Data_Ring = require("../Data.Ring");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Traversable = require("../Data.Traversable");
var Data_Unit = require("../Data.Unit");
var Graphics_Canvas = require("../Graphics.Canvas");
var $$Math = require("../Math");
var Prelude = require("../Prelude");
var Signal = require("../Signal");
var Signal_DOM = require("../Signal.DOM");
var y = Data_Lens_Lens.lens(function (v) {
    return v.y;
})(function (v) {
    return function (v1) {
        var $30 = {};
        for (var $31 in v) {
            if ({}.hasOwnProperty.call(v, $31)) {
                $30[$31] = v[$31];
            };
        };
        $30.y = v1;
        return $30;
    };
});
var x = Data_Lens_Lens.lens(function (v) {
    return v.x;
})(function (v) {
    return function (v1) {
        var $33 = {};
        for (var $34 in v) {
            if ({}.hasOwnProperty.call(v, $34)) {
                $33[$34] = v[$34];
            };
        };
        $33.x = v1;
        return $33;
    };
});
var width = 1024.0;
var upKeyCode = 38;
var rightKeyCode = 39;
var renderObj = function (ctx) {
    return function (state) {
        return function __do() {
            var v = Graphics_Canvas.setFillStyle((function () {
                if (state.collided) {
                    return "#DD0000";
                };
                return state.color;
            })())(ctx)();
            var v1 = Graphics_Canvas.fillRect(ctx)({
                x: state.pos.x, 
                y: state.pos.y, 
                w: state.size.x, 
                h: state.size.y
            })();
            return Data_Unit.unit;
        };
    };
};
var pos = Data_Lens_Lens.lens(function (v) {
    return v.pos;
})(function (v) {
    return function (v1) {
        var $37 = {};
        for (var $38 in v) {
            if ({}.hasOwnProperty.call(v, $38)) {
                $37[$38] = v[$38];
            };
        };
        $37.pos = v1;
        return $37;
    };
});
var pointInRect = function (p) {
    return function (obj) {
        return obj.pos.x <= p.x && p.x <= obj.pos.x + obj.size.x && (obj.pos.y <= p.y && p.y <= obj.pos.y + obj.size.y);
    };
};
var moveObj = function (direction) {
    return function (rect) {
        return Data_Lens_Setter.over(function ($53) {
            return pos(Data_Profunctor_Strong.strongFn)(y(Data_Profunctor_Strong.strongFn)($53));
        })(Data_Semiring.add(Data_Semiring.semiringNumber)(direction.y * rect.speed))(Data_Lens_Setter.over(function ($54) {
            return pos(Data_Profunctor_Strong.strongFn)(x(Data_Profunctor_Strong.strongFn)($54));
        })(Data_Semiring.add(Data_Semiring.semiringNumber)(direction.x * rect.speed))(rect));
    };
};
var makePoint = function (x1) {
    return function (y1) {
        return {
            x: x1, 
            y: y1
        };
    };
};
var leftKeyCode = 37;
var height = 800.0;
var rect1 = {
    pos: {
        x: width / 2.0 - 15.0, 
        y: height / 2.0 - 15.0
    }, 
    size: {
        x: 40.0, 
        y: 40.0
    }, 
    speed: 5.0, 
    collided: false, 
    color: "#0088DD"
};
var rect2 = {
    pos: {
        x: width / 2.0 - 15.0, 
        y: height / 2.0 - 15.0
    }, 
    size: {
        x: 30.0, 
        y: 30.0
    }, 
    speed: 1.0, 
    collided: false, 
    color: "#0088DD"
};
var initialState = {
    objs1: [ rect1 ], 
    objs2: [ rect2 ]
};
var downKeyCode = 40;
var corners = function (obj) {
    return [ makePoint(obj.pos.x)(obj.pos.y), makePoint(obj.pos.x + obj.size.x)(obj.pos.y), makePoint(obj.pos.x)(obj.pos.y + obj.size.y), makePoint(obj.pos.x + obj.size.x)(obj.pos.y + obj.size.y) ];
};
var collision = function (x1) {
    return function (x2) {
        return Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Control_Category.id(Control_Category.categoryFn))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.map(Data_Functor.functorArray)(Data_Function.flip(pointInRect)(x2))(corners(x1)))(Data_Functor.map(Data_Functor.functorArray)(Data_Function.flip(pointInRect)(x1))(corners(x2))));
    };
};
var collided = Data_Lens_Lens.lens(function (v) {
    return v.collided;
})(function (v) {
    return function (v1) {
        var $40 = {};
        for (var $41 in v) {
            if ({}.hasOwnProperty.call(v, $41)) {
                $40[$41] = v[$41];
            };
        };
        $40.collided = v1;
        return $40;
    };
});
var testCollisionWith = function (objs1) {
    return function (objs2) {
        return Data_Functor.map(Data_Functor.functorArray)(function (x1) {
            return Data_Lens_Setter.set(collided(Data_Profunctor_Strong.strongFn))(Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Control_Category.id(Control_Category.categoryFn))(Data_Functor.map(Data_Functor.functorArray)(collision(x1))(objs2)))(x1);
        })(objs1);
    };
};
var collisionLayers = function (state) {
    return {
        objs1: testCollisionWith(state.objs1)(state.objs2), 
        objs2: testCollisionWith(state.objs2)(state.objs1)
    };
};
var update = function (direction) {
    return function (state) {
        return collisionLayers({
            objs1: Data_Functor.map(Data_Functor.functorArray)(moveObj(direction))(state.objs1), 
            objs2: Data_Functor.map(Data_Functor.functorArray)(moveObj(direction))(state.objs2)
        });
    };
};
var clearCanvas = function (ctx) {
    return function __do() {
        var v = Graphics_Canvas.setFillStyle("#1B1C1B")(ctx)();
        return Graphics_Canvas.fillRect(ctx)({
            x: 0.0, 
            y: 0.0, 
            w: 1024.0, 
            h: 800.0
        })();
    };
};
var render = function (context) {
    return function (state) {
        return function __do() {
            var v = clearCanvas(context)();
            var v1 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Eff.applicativeEff)(renderObj(context))(state.objs1)();
            var v2 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Eff.applicativeEff)(renderObj(context))(state.objs2)();
            return Data_Unit.unit;
        };
    };
};
var arrows = function __do() {
    var v = Signal_DOM.keyPressed(leftKeyCode)();
    var v1 = Signal_DOM.keyPressed(rightKeyCode)();
    var v2 = Signal_DOM.keyPressed(upKeyCode)();
    var v3 = Signal_DOM.keyPressed(downKeyCode)();
    var asNum = function (b) {
        if (b) {
            return 1.0;
        };
        return 0.0;
    };
    return Control_Apply.apply(Signal.applySignal)(Control_Apply.apply(Signal.applySignal)(Control_Apply.apply(Signal.applySignal)(Data_Functor.map(Signal.functorSignal)(function (l) {
        return function (r) {
            return function (u) {
                return function (d) {
                    return {
                        x: asNum(r) - asNum(l), 
                        y: asNum(d) - asNum(u)
                    };
                };
            };
        };
    })(v))(v1))(v2))(v3);
};
var main = function (dictPartial) {
    return function __do() {
        var v = Graphics_Canvas.getCanvasElementById("canvas")();
        var __unused = function (dictPartial1) {
            return function ($dollar27) {
                return $dollar27;
            };
        };
        return __unused(dictPartial)((function () {
            if (v instanceof Data_Maybe.Just) {
                return function __do() {
                    var v1 = Graphics_Canvas.getContext2D(v.value0)();
                    var v2 = Signal_DOM.animationFrame();
                    var v3 = arrows();
                    var input = Control_Apply.apply(Signal.applySignal)(Data_Functor.map(Signal.functorSignal)(Data_Function["const"])(v3))(v2);
                    var game = Signal.foldp(update)(initialState)(input);
                    return Signal.runSignal(Data_Functor.map(Signal.functorSignal)(render(v1))(game))();
                };
            };
            throw new Error("Failed pattern match at Main line 23, column 3 - line 24, column 3: " + [ v.constructor.name ]);
        })())();
    };
};
module.exports = {
    arrows: arrows, 
    clearCanvas: clearCanvas, 
    collided: collided, 
    collision: collision, 
    collisionLayers: collisionLayers, 
    corners: corners, 
    downKeyCode: downKeyCode, 
    height: height, 
    initialState: initialState, 
    leftKeyCode: leftKeyCode, 
    main: main, 
    makePoint: makePoint, 
    moveObj: moveObj, 
    pointInRect: pointInRect, 
    pos: pos, 
    rect1: rect1, 
    rect2: rect2, 
    render: render, 
    renderObj: renderObj, 
    rightKeyCode: rightKeyCode, 
    testCollisionWith: testCollisionWith, 
    upKeyCode: upKeyCode, 
    update: update, 
    width: width, 
    x: x, 
    y: y
};
